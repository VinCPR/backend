// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO "group" (
    "academic_year_id" ,
    "name"
) VALUES (
    $1 , $2
) RETURNING id, academic_year_id, name, created_at
`

type CreateGroupParams struct {
	AcademicYearID int64  `json:"academic_year_id"`
	Name           string `json:"name"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.AcademicYearID, arg.Name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, academic_year_id, name, created_at FROM "group"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetGroupByID(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getGroupByIndex = `-- name: GetGroupByIndex :one
SELECT id, academic_year_id, name, created_at FROM "group"
WHERE "academic_year_id" = $1 AND "name" = $2
LIMIT 1
`

type GetGroupByIndexParams struct {
	AcademicYearID int64  `json:"academic_year_id"`
	Name           string `json:"name"`
}

func (q *Queries) GetGroupByIndex(ctx context.Context, arg GetGroupByIndexParams) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByIndex, arg.AcademicYearID, arg.Name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const listGroupsByName = `-- name: ListGroupsByName :many
SELECT id, academic_year_id, name, created_at FROM "group"
WHERE "academic_year_id" = $1
ORDER BY "name"
`

func (q *Queries) ListGroupsByName(ctx context.Context, academicYearID int64) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGroupsByName, academicYearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
