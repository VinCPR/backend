// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: attending.sql

package db

import (
	"context"
)

const createAttending = `-- name: CreateAttending :one
INSERT INTO "attending" (
    user_id,
    attending_id,
    first_name ,
    last_name,
    mobile ,
    biography ,
    image
) VALUES (
    $1 , $2 , $3, $4 , $5, $6, $7
) RETURNING id, user_id, attending_id, first_name, last_name, mobile, biography, image, created_at
`

type CreateAttendingParams struct {
	UserID      int64  `json:"user_id"`
	AttendingID string `json:"attending_id"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Mobile      string `json:"mobile"`
	Biography   string `json:"biography"`
	Image       string `json:"image"`
}

func (q *Queries) CreateAttending(ctx context.Context, arg CreateAttendingParams) (Attending, error) {
	row := q.db.QueryRow(ctx, createAttending,
		arg.UserID,
		arg.AttendingID,
		arg.FirstName,
		arg.LastName,
		arg.Mobile,
		arg.Biography,
		arg.Image,
	)
	var i Attending
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AttendingID,
		&i.FirstName,
		&i.LastName,
		&i.Mobile,
		&i.Biography,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const getAttendingByAttendingId = `-- name: GetAttendingByAttendingId :one
SELECT id, user_id, attending_id, first_name, last_name, mobile, biography, image, created_at FROM "attending"
WHERE attending_id = $1 LIMIT 1
`

func (q *Queries) GetAttendingByAttendingId(ctx context.Context, attendingID string) (Attending, error) {
	row := q.db.QueryRow(ctx, getAttendingByAttendingId, attendingID)
	var i Attending
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AttendingID,
		&i.FirstName,
		&i.LastName,
		&i.Mobile,
		&i.Biography,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const getAttendingByID = `-- name: GetAttendingByID :one
SELECT id, user_id, attending_id, first_name, last_name, mobile, biography, image, created_at FROM "attending"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetAttendingByID(ctx context.Context, id int64) (Attending, error) {
	row := q.db.QueryRow(ctx, getAttendingByID, id)
	var i Attending
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AttendingID,
		&i.FirstName,
		&i.LastName,
		&i.Mobile,
		&i.Biography,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const getAttendingByUserId = `-- name: GetAttendingByUserId :one
SELECT id, user_id, attending_id, first_name, last_name, mobile, biography, image, created_at FROM "attending"
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetAttendingByUserId(ctx context.Context, userID int64) (Attending, error) {
	row := q.db.QueryRow(ctx, getAttendingByUserId, userID)
	var i Attending
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AttendingID,
		&i.FirstName,
		&i.LastName,
		&i.Mobile,
		&i.Biography,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const listAttendingsByAttendingID = `-- name: ListAttendingsByAttendingID :many
SELECT id, user_id, attending_id, first_name, last_name, mobile, biography, image, created_at FROM "attending"
ORDER BY attending_id
LIMIT $1
OFFSET $2
`

type ListAttendingsByAttendingIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAttendingsByAttendingID(ctx context.Context, arg ListAttendingsByAttendingIDParams) ([]Attending, error) {
	rows, err := q.db.Query(ctx, listAttendingsByAttendingID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attending{}
	for rows.Next() {
		var i Attending
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AttendingID,
			&i.FirstName,
			&i.LastName,
			&i.Mobile,
			&i.Biography,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAttendingsByName = `-- name: ListAttendingsByName :many
SELECT id, user_id, attending_id, first_name, last_name, mobile, biography, image, created_at FROM "attending"
ORDER BY first_name, last_name
LIMIT $1
OFFSET $2
`

type ListAttendingsByNameParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAttendingsByName(ctx context.Context, arg ListAttendingsByNameParams) ([]Attending, error) {
	rows, err := q.db.Query(ctx, listAttendingsByName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Attending{}
	for rows.Next() {
		var i Attending
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AttendingID,
			&i.FirstName,
			&i.LastName,
			&i.Mobile,
			&i.Biography,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
