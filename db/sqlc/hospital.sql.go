// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: hospital.sql

package db

import (
	"context"
)

const createHospital = `-- name: CreateHospital :one
INSERT INTO "hospital" (
    name,
    description,
    address
) VALUES (
    $1 , $2 , $3
) RETURNING id, name, description, address, created_at
`

type CreateHospitalParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Address     string `json:"address"`
}

func (q *Queries) CreateHospital(ctx context.Context, arg CreateHospitalParams) (Hospital, error) {
	row := q.db.QueryRow(ctx, createHospital, arg.Name, arg.Description, arg.Address)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getHospitalByName = `-- name: GetHospitalByName :one
SELECT id, name, description, address, created_at FROM "hospital"
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetHospitalByName(ctx context.Context, name string) (Hospital, error) {
	row := q.db.QueryRow(ctx, getHospitalByName, name)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const listHospitalsByName = `-- name: ListHospitalsByName :many
SELECT id, name, description, address, created_at FROM "hospital"
ORDER BY "name"
LIMIT $1
OFFSET $2
`

type ListHospitalsByNameParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHospitalsByName(ctx context.Context, arg ListHospitalsByNameParams) ([]Hospital, error) {
	rows, err := q.db.Query(ctx, listHospitalsByName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Hospital{}
	for rows.Next() {
		var i Hospital
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
