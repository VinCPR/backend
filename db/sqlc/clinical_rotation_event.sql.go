// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: clinical_rotation_event.sql

package db

import (
	"context"
	"time"
)

const createRotationEvent = `-- name: CreateRotationEvent :one
INSERT INTO "clinical_rotation_event" (
    "academic_year_id", "group_id", "service_id", "start_date", "end_date"
) VALUES(
    $1, $2, $3, $4, $5
) RETURNING id, academic_year_id, group_id, service_id, start_date, end_date, created_at
`

type CreateRotationEventParams struct {
	AcademicYearID int64     `json:"academic_year_id"`
	GroupID        int64     `json:"group_id"`
	ServiceID      int64     `json:"service_id"`
	StartDate      time.Time `json:"start_date"`
	EndDate        time.Time `json:"end_date"`
}

func (q *Queries) CreateRotationEvent(ctx context.Context, arg CreateRotationEventParams) (ClinicalRotationEvent, error) {
	row := q.db.QueryRow(ctx, createRotationEvent,
		arg.AcademicYearID,
		arg.GroupID,
		arg.ServiceID,
		arg.StartDate,
		arg.EndDate,
	)
	var i ClinicalRotationEvent
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.GroupID,
		&i.ServiceID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

type CreateRotationEventsParams struct {
	AcademicYearID int64     `json:"academic_year_id"`
	GroupID        int64     `json:"group_id"`
	ServiceID      int64     `json:"service_id"`
	StartDate      time.Time `json:"start_date"`
	EndDate        time.Time `json:"end_date"`
}

const deleteRotationEventsByAcademicYear = `-- name: DeleteRotationEventsByAcademicYear :exec
DELETE FROM "clinical_rotation_event" WHERE "academic_year_id" = $1
`

func (q *Queries) DeleteRotationEventsByAcademicYear(ctx context.Context, academicYearID int64) error {
	_, err := q.db.Exec(ctx, deleteRotationEventsByAcademicYear, academicYearID)
	return err
}

const getRotationEventByID = `-- name: GetRotationEventByID :one
SELECT id, academic_year_id, group_id, service_id, start_date, end_date, created_at FROM "clinical_rotation_event"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRotationEventByID(ctx context.Context, id int64) (ClinicalRotationEvent, error) {
	row := q.db.QueryRow(ctx, getRotationEventByID, id)
	var i ClinicalRotationEvent
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.GroupID,
		&i.ServiceID,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const listRotationEventsByAcademicYearID = `-- name: ListRotationEventsByAcademicYearID :many
SELECT id, academic_year_id, group_id, service_id, start_date, end_date, created_at FROM "clinical_rotation_event"
WHERE "academic_year_id" = $1
ORDER BY "start_date"
`

func (q *Queries) ListRotationEventsByAcademicYearID(ctx context.Context, academicYearID int64) ([]ClinicalRotationEvent, error) {
	rows, err := q.db.Query(ctx, listRotationEventsByAcademicYearID, academicYearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClinicalRotationEvent{}
	for rows.Next() {
		var i ClinicalRotationEvent
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.GroupID,
			&i.ServiceID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRotationEventsByAcademicYearIDAndDay = `-- name: ListRotationEventsByAcademicYearIDAndDay :many
SELECT id, academic_year_id, group_id, service_id, start_date, end_date, created_at FROM "clinical_rotation_event"
WHERE "academic_year_id" = $1 AND "start_date" <= $2::date and $2::date <= "end_date"
ORDER BY "id"
`

type ListRotationEventsByAcademicYearIDAndDayParams struct {
	AcademicYearID int64     `json:"academic_year_id"`
	Day            time.Time `json:"day"`
}

func (q *Queries) ListRotationEventsByAcademicYearIDAndDay(ctx context.Context, arg ListRotationEventsByAcademicYearIDAndDayParams) ([]ClinicalRotationEvent, error) {
	rows, err := q.db.Query(ctx, listRotationEventsByAcademicYearIDAndDay, arg.AcademicYearID, arg.Day)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClinicalRotationEvent{}
	for rows.Next() {
		var i ClinicalRotationEvent
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.GroupID,
			&i.ServiceID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRotationEventsByAcademicYearIDAndGroupID = `-- name: ListRotationEventsByAcademicYearIDAndGroupID :many
SELECT id, academic_year_id, group_id, service_id, start_date, end_date, created_at FROM "clinical_rotation_event"
WHERE "academic_year_id" = $1 AND "group_id" = ANY(($2)::bigint[])
ORDER BY "start_date"
`

type ListRotationEventsByAcademicYearIDAndGroupIDParams struct {
	AcademicYearID int64   `json:"academic_year_id"`
	GroupIds       []int64 `json:"group_ids"`
}

func (q *Queries) ListRotationEventsByAcademicYearIDAndGroupID(ctx context.Context, arg ListRotationEventsByAcademicYearIDAndGroupIDParams) ([]ClinicalRotationEvent, error) {
	rows, err := q.db.Query(ctx, listRotationEventsByAcademicYearIDAndGroupID, arg.AcademicYearID, arg.GroupIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClinicalRotationEvent{}
	for rows.Next() {
		var i ClinicalRotationEvent
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.GroupID,
			&i.ServiceID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRotationEventsByAcademicYearIDAndServiceID = `-- name: ListRotationEventsByAcademicYearIDAndServiceID :many
SELECT id, academic_year_id, group_id, service_id, start_date, end_date, created_at FROM "clinical_rotation_event"
WHERE "academic_year_id" = $1 AND "service_id" = ANY(($2)::bigint[])
ORDER BY "start_date"
`

type ListRotationEventsByAcademicYearIDAndServiceIDParams struct {
	AcademicYearID int64   `json:"academic_year_id"`
	ServiceIds     []int64 `json:"service_ids"`
}

func (q *Queries) ListRotationEventsByAcademicYearIDAndServiceID(ctx context.Context, arg ListRotationEventsByAcademicYearIDAndServiceIDParams) ([]ClinicalRotationEvent, error) {
	rows, err := q.db.Query(ctx, listRotationEventsByAcademicYearIDAndServiceID, arg.AcademicYearID, arg.ServiceIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClinicalRotationEvent{}
	for rows.Next() {
		var i ClinicalRotationEvent
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.GroupID,
			&i.ServiceID,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
