// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: student_to_group.sql

package db

import (
	"context"
)

const createStudentToGroup = `-- name: CreateStudentToGroup :one
INSERT INTO "student_to_group" (
    academic_year_id,
    student_id,
    group_id
) VALUES (
    $1 , $2, $3
) RETURNING id, academic_year_id, student_id, group_id, created_at
`

type CreateStudentToGroupParams struct {
	AcademicYearID int64 `json:"academic_year_id"`
	StudentID      int64 `json:"student_id"`
	GroupID        int64 `json:"group_id"`
}

func (q *Queries) CreateStudentToGroup(ctx context.Context, arg CreateStudentToGroupParams) (StudentToGroup, error) {
	row := q.db.QueryRow(ctx, createStudentToGroup, arg.AcademicYearID, arg.StudentID, arg.GroupID)
	var i StudentToGroup
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.StudentID,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentToGroupByAcademicYearID = `-- name: GetStudentToGroupByAcademicYearID :many
SELECT id, academic_year_id, student_id, group_id, created_at FROM "student_to_group"
WHERE academic_year_id = $1
`

func (q *Queries) GetStudentToGroupByAcademicYearID(ctx context.Context, academicYearID int64) ([]StudentToGroup, error) {
	rows, err := q.db.Query(ctx, getStudentToGroupByAcademicYearID, academicYearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentToGroup{}
	for rows.Next() {
		var i StudentToGroup
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.StudentID,
			&i.GroupID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentToGroupByAcademicYearIDAndStudentID = `-- name: GetStudentToGroupByAcademicYearIDAndStudentID :many
SELECT id, academic_year_id, student_id, group_id, created_at FROM "student_to_group"
WHERE academic_year_id = $1 AND student_id = $2
`

type GetStudentToGroupByAcademicYearIDAndStudentIDParams struct {
	AcademicYearID int64 `json:"academic_year_id"`
	StudentID      int64 `json:"student_id"`
}

func (q *Queries) GetStudentToGroupByAcademicYearIDAndStudentID(ctx context.Context, arg GetStudentToGroupByAcademicYearIDAndStudentIDParams) ([]StudentToGroup, error) {
	rows, err := q.db.Query(ctx, getStudentToGroupByAcademicYearIDAndStudentID, arg.AcademicYearID, arg.StudentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentToGroup{}
	for rows.Next() {
		var i StudentToGroup
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.StudentID,
			&i.GroupID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentToGroupByGroupID = `-- name: GetStudentToGroupByGroupID :many
SELECT id, academic_year_id, student_id, group_id, created_at FROM "student_to_group"
WHERE group_id = $1
`

func (q *Queries) GetStudentToGroupByGroupID(ctx context.Context, groupID int64) ([]StudentToGroup, error) {
	rows, err := q.db.Query(ctx, getStudentToGroupByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentToGroup{}
	for rows.Next() {
		var i StudentToGroup
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.StudentID,
			&i.GroupID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentToGroupByStudentID = `-- name: GetStudentToGroupByStudentID :many
SELECT id, academic_year_id, student_id, group_id, created_at FROM "student_to_group"
WHERE student_id = $1
`

func (q *Queries) GetStudentToGroupByStudentID(ctx context.Context, studentID int64) ([]StudentToGroup, error) {
	rows, err := q.db.Query(ctx, getStudentToGroupByStudentID, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudentToGroup{}
	for rows.Next() {
		var i StudentToGroup
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.StudentID,
			&i.GroupID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
