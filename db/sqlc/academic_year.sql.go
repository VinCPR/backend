// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: academic_year.sql

package db

import (
	"context"
	"time"
)

const createAcademicYear = `-- name: CreateAcademicYear :one
INSERT INTO "academic_year" (
    "name", "start_date", "end_date"
) VALUES(
    $1, $2, $3
) RETURNING id, name, start_date, end_date, created_at
`

type CreateAcademicYearParams struct {
	Name      string    `json:"name"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) CreateAcademicYear(ctx context.Context, arg CreateAcademicYearParams) (AcademicYear, error) {
	row := q.db.QueryRow(ctx, createAcademicYear, arg.Name, arg.StartDate, arg.EndDate)
	var i AcademicYear
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getAcademicYearByName = `-- name: GetAcademicYearByName :one
SELECT id, name, start_date, end_date, created_at FROM "academic_year"
WHERE "name" = $1 LIMIT 1
`

func (q *Queries) GetAcademicYearByName(ctx context.Context, name string) (AcademicYear, error) {
	row := q.db.QueryRow(ctx, getAcademicYearByName, name)
	var i AcademicYear
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}
