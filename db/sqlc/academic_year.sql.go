// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: academic_year.sql

package db

import (
	"context"
	"time"
)

const createAcademicYear = `-- name: CreateAcademicYear :one
INSERT INTO "academic_year" (
    "name", "start_date", "end_date"
) VALUES(
    $1, $2, $3
) RETURNING id, name, start_date, end_date, created_at
`

type CreateAcademicYearParams struct {
	Name      string    `json:"name"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) CreateAcademicYear(ctx context.Context, arg CreateAcademicYearParams) (AcademicYear, error) {
	row := q.db.QueryRow(ctx, createAcademicYear, arg.Name, arg.StartDate, arg.EndDate)
	var i AcademicYear
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getAcademicYearByName = `-- name: GetAcademicYearByName :one
SELECT id, name, start_date, end_date, created_at FROM "academic_year"
WHERE "name" = $1 LIMIT 1
`

func (q *Queries) GetAcademicYearByName(ctx context.Context, name string) (AcademicYear, error) {
	row := q.db.QueryRow(ctx, getAcademicYearByName, name)
	var i AcademicYear
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const listAcademicYearByEndDate = `-- name: ListAcademicYearByEndDate :many
SELECT id, name, start_date, end_date, created_at FROM "academic_year"
ORDER BY "end_date" DESC
LIMIT $1
OFFSET $2
`

type ListAcademicYearByEndDateParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAcademicYearByEndDate(ctx context.Context, arg ListAcademicYearByEndDateParams) ([]AcademicYear, error) {
	rows, err := q.db.Query(ctx, listAcademicYearByEndDate, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AcademicYear{}
	for rows.Next() {
		var i AcademicYear
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
