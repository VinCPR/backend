// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: group_to_block.sql

package db

import (
	"context"
)

const createGroupToBlock = `-- name: CreateGroupToBlock :one
INSERT INTO "group_to_block" (
    academic_year_id,
    group_id,
    block_id
) VALUES (
    $1 , $2, $3
) RETURNING id, academic_year_id, group_id, block_id, created_at
`

type CreateGroupToBlockParams struct {
	AcademicYearID int64 `json:"academic_year_id"`
	GroupID        int64 `json:"group_id"`
	BlockID        int64 `json:"block_id"`
}

func (q *Queries) CreateGroupToBlock(ctx context.Context, arg CreateGroupToBlockParams) (GroupToBlock, error) {
	row := q.db.QueryRow(ctx, createGroupToBlock, arg.AcademicYearID, arg.GroupID, arg.BlockID)
	var i GroupToBlock
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.GroupID,
		&i.BlockID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroupToBlocksByAcademicYear = `-- name: DeleteGroupToBlocksByAcademicYear :exec
DELETE FROM "group_to_block" WHERE "academic_year_id" = $1
`

func (q *Queries) DeleteGroupToBlocksByAcademicYear(ctx context.Context, academicYearID int64) error {
	_, err := q.db.Exec(ctx, deleteGroupToBlocksByAcademicYear, academicYearID)
	return err
}

const getGroupToBlockByAcademicYearID = `-- name: GetGroupToBlockByAcademicYearID :many
SELECT id, academic_year_id, group_id, block_id, created_at FROM "group_to_block"
WHERE academic_year_id = $1
`

func (q *Queries) GetGroupToBlockByAcademicYearID(ctx context.Context, academicYearID int64) ([]GroupToBlock, error) {
	rows, err := q.db.Query(ctx, getGroupToBlockByAcademicYearID, academicYearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupToBlock{}
	for rows.Next() {
		var i GroupToBlock
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.GroupID,
			&i.BlockID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupToBlockByBlockID = `-- name: GetGroupToBlockByBlockID :many
SELECT id, academic_year_id, group_id, block_id, created_at FROM "group_to_block"
WHERE block_id = $1
`

func (q *Queries) GetGroupToBlockByBlockID(ctx context.Context, blockID int64) ([]GroupToBlock, error) {
	rows, err := q.db.Query(ctx, getGroupToBlockByBlockID, blockID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupToBlock{}
	for rows.Next() {
		var i GroupToBlock
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.GroupID,
			&i.BlockID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupToBlockByGroupID = `-- name: GetGroupToBlockByGroupID :many
SELECT id, academic_year_id, group_id, block_id, created_at FROM "group_to_block"
WHERE group_id = $1
`

func (q *Queries) GetGroupToBlockByGroupID(ctx context.Context, groupID int64) ([]GroupToBlock, error) {
	rows, err := q.db.Query(ctx, getGroupToBlockByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupToBlock{}
	for rows.Next() {
		var i GroupToBlock
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.GroupID,
			&i.BlockID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
