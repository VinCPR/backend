// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: period.sql

package db

import (
	"context"
	"time"
)

const createPeriod = `-- name: CreatePeriod :one
INSERT INTO "period" (
  academic_year_id,
  name,
  start_date,
  end_date
) VALUES (
  $1, $2, $3, $4
) RETURNING id, academic_year_id, name, start_date, end_date, created_at
`

type CreatePeriodParams struct {
	AcademicYearID int64     `json:"academic_year_id"`
	Name           string    `json:"name"`
	StartDate      time.Time `json:"start_date"`
	EndDate        time.Time `json:"end_date"`
}

func (q *Queries) CreatePeriod(ctx context.Context, arg CreatePeriodParams) (Period, error) {
	row := q.db.QueryRow(ctx, createPeriod,
		arg.AcademicYearID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
	)
	var i Period
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getPeriodByID = `-- name: GetPeriodByID :one
SELECT id, academic_year_id, name, start_date, end_date, created_at FROM "period"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetPeriodByID(ctx context.Context, id int64) (Period, error) {
	row := q.db.QueryRow(ctx, getPeriodByID, id)
	var i Period
	err := row.Scan(
		&i.ID,
		&i.AcademicYearID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const listPeriodsByStartDate = `-- name: ListPeriodsByStartDate :many
SELECT id, academic_year_id, name, start_date, end_date, created_at FROM "period"
WHERE "academic_year_id" = $1
ORDER BY "start_date"
`

func (q *Queries) ListPeriodsByStartDate(ctx context.Context, academicYearID int64) ([]Period, error) {
	rows, err := q.db.Query(ctx, listPeriodsByStartDate, academicYearID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Period{}
	for rows.Next() {
		var i Period
		if err := rows.Scan(
			&i.ID,
			&i.AcademicYearID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
